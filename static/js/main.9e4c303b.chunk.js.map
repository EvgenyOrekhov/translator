{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","mergeParams","params","key","App","state","actions","useEffect","a","get","ui","data","languages","set","langs","useDebouncedCallback","console","log","text","lang","from","to","translation","translate","LanguageSelector","type","className","onChange","event","target","value","Object","entries","sort","b","localeCompare","map","language","trim","onClick","switch","placeholder","setText","clear","length","readOnly","save","Date","now","history","timestamp","class","formatRelative","Boolean","window","location","hostname","match","initialState","init","logger","defaultActions","ignore","subscribers","ReactDOM","render","StrictMode","document","getElementById","localStoragePlugin","selector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e4c303b.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { formatRelative } from \"date-fns\";\n\nconst instance = axios.create({\n  baseURL: \"https://translate.yandex.net/api/v1.5/tr.json/\",\n});\n\nfunction mergeParams(params) {\n  return {\n    key:\n      \"trnsl.1.1.20200412T100451Z.4ac199cf689eab8d.26e9890d9ff3681a1382cbbdb0ddf3c29ef4476d\",\n    ...params,\n  };\n}\n\nfunction App({ state, actions }) {\n  useEffect(() => {\n    (async function () {\n      const { data } = await instance.get(\"/getLangs\", {\n        params: mergeParams({ ui: \"ru\" }),\n      });\n      actions.languages.set(data.langs);\n    })();\n  }, [actions.languages]);\n\n  const [translate] = useDebouncedCallback(async function translate() {\n    console.log(state);\n    const { data } = await instance.get(\"/translate\", {\n      params: mergeParams({\n        ui: \"ru\",\n        text: state.text,\n        lang: `${state.from}-${state.to}`,\n      }),\n    });\n    actions.translation.set(data.text[0]);\n  }, 1000);\n\n  useEffect(() => {\n    if (state.text.trim() !== \"\") {\n      translate();\n    }\n  }, [state.text, state.from, state.to, translate]);\n\n  function LanguageSelector({ type }) {\n    return (\n      <select\n        className=\"language\"\n        onChange={(event) => actions[type].set(event.target.value)}\n        value={state[type]}\n      >\n        {Object.entries(state.languages)\n          .sort((a, b) => a[1].localeCompare(b[1]))\n          .map(([key, language]) => (\n            <option key={key} value={key}>\n              {language}\n            </option>\n          ))}\n      </select>\n    );\n  }\n\n  function handleChange(event) {\n    actions.setText(event.target.value);\n  }\n\n  function handleSave() {\n    actions.save(Date.now());\n  }\n\n  return (\n    <div>\n      <div className=\"languages\">\n        <LanguageSelector type=\"from\" />\n        <button type=\"button\" className=\"switch\" onClick={actions.switch}>\n          ⇄\n        </button>\n        <LanguageSelector type=\"to\" />\n      </div>\n      <div className=\"from\">\n        <textarea\n          placeholder=\"Введите текст для перевода\"\n          value={state.text}\n          onChange={handleChange}\n        ></textarea>\n        {state.text && (\n          <button type=\"button\" className=\"clear\" onClick={actions.clear}>\n            ✕\n          </button>\n        )}\n      </div>\n      <small className=\"characters-left\">{9999 - state.text.length}</small>\n      <div className=\"from\">\n        <textarea readOnly value={state.translation}></textarea>\n        {state.translation && (\n          <button type=\"button\" className=\"save\" onClick={handleSave}>\n            ➔\n          </button>\n        )}\n      </div>\n      <footer>\n        <div className=\"history-header\">\n          <div className=\"history-title\">История</div>\n          {/* <button type=\"button\">См все</button> */}\n        </div>\n        {state.history.length === 0 ? (\n          <div className=\"empty\">\n            <h2>Пусто</h2>\n            Нет последних переводов\n          </div>\n        ) : (\n          state.history.map(({ from, to, text, translation, timestamp }) => (\n            <div key={timestamp} class=\"history-item\">\n              <div className=\"history-item-from\">\n                <small className=\"history-item-header\">\n                  <div>{state.languages[from]}</div>\n                  <div>{formatRelative(timestamp, Date.now())}</div>\n                </small>\n                <div>{text}</div>\n              </div>\n              <div className=\"history-item-to\">\n                <small className=\"history-item-header\">\n                  <div>{state.languages[to]}</div>\n                </small>\n                <div>{translation}</div>\n              </div>\n            </div>\n          ))\n        )}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { init } from \"actus\";\nimport logger from \"actus-logger\";\nimport defaultActions from \"actus-default-actions\";\nimport localStoragePlugin from \"actus-localstorage\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst initialState = {\n  languages: [],\n  from: \"en\",\n  to: \"ru\",\n  text: \"\",\n  translation: \"\",\n  history: [],\n};\n\ninit([\n  logger(),\n  defaultActions(initialState),\n  {\n    state: initialState,\n    actions: {\n      setText: (text, state) => ({\n        ...state,\n        text,\n        translation: text === \"\" ? \"\" : state.translation,\n      }),\n      switch: (ignore, state) => ({\n        ...state,\n        from: state.to,\n        to: state.from,\n        text: state.translation,\n      }),\n      clear: (ignore, state) => ({ ...state, text: \"\", translation: \"\" }),\n      save: (timestamp, state) =>\n        state.text === \"\"\n          ? state\n          : {\n              ...state,\n              history: [\n                {\n                  from: state.from,\n                  to: state.to,\n                  text: state.text,\n                  translation: state.translation,\n                  timestamp,\n                },\n                ...state.history,\n              ],\n            },\n    },\n    subscribers: [\n      ({ state, actions }) => {\n        ReactDOM.render(\n          <React.StrictMode>\n            <App state={state} actions={actions} />\n          </React.StrictMode>,\n          document.getElementById(\"root\")\n        );\n      },\n    ],\n  },\n  localStoragePlugin({\n    selector: (state) => ({\n      from: state.from,\n      to: state.to,\n      history: state.history,\n    }),\n  }),\n]);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}